S3
simple storage service

# from flask import Flask
#
#
# app = Flask(__name__)
#
# @app.route('/')
# def home():
#     return 'Hello World !!!'
#
# app.run(port=5000)


netstat -ano

Web server
software designed to accept incoming web request




http verbs ????

Single Responsibility Principle(SRP)
simple class 

persistence
God Object(not a good appr.)

Open Closed Principle(OCP)-
Inheritance posible,but no modification

Enterprise patterns: Specification

sed -n 366101,368801P apps.openapp-Delhi-bharti_s1_Delhi_001-mcm.log>rajeevmi_mcm_2_21

Creational Patterns
--------------------
Builder-
When piecewise object construction is complicated provide an api for doing it succinctly.
Factory Method-
Abstract Factory-
Prototype-
Singleton-

Structural Patterns
----------------------
Adapter-
Bridge-
Composite-
Decorator-
Facade-
FlyWeight-
Proxy-

Behavioral Patterns
-------------------------
Chain of Responsibility-
Iterator-
Momento-
State-
Template Method-
Command-
Mediator-
Observer-
Stategy-
Visitor-



Extra
Null Pointer/Object Patterns


Builder-


Data Structure:

Stacks
Queue
Linked Li9st
Trees
Hashing
Heaps
Graph
Binomial Heaps
Fibonacci Heaps
Red Black Trees
Tries
Ternary Serach Trees
Segment Trees
Splay Tree
Interval Trees
Binary Indexed Trees
B-Tree, B+ Tree

AKIA2TZ3SZCGPQSVTRSJ - AK
vrT6wTNynrKWxQjQLUHl8+GsjenNTYjL2u1GYWys  - sk
https://729732532364.signin.aws.amazon.com/console
https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&all-free-tier.sort-order=asc&awsf.Free%20Tier%20Types=tier%23trial






npm install -g serverless
serverless config credentials --provider aws --key key_val --secret    sec_val  --profile pro_name
serverless create --template aws-python --path fun_name
serverless deploy -v
serverless invoke -f hello -l
serverless deploy function -f hello
sls logs -f hello -t
sls remove


provider:
  name: aws
  runtime: python2.7
  region: ap-south-1
  profile: rajeev
  

# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: python-env-var
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python2.7
  region: ap-south-1
  profile: rajeev

# you can define service wide environment variables here
  environment:
    variable1: value1
    FIRST_NAME: "RAJEEV"
# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  hello-env-raj:
    handler: handler.hello
  hello-env-rajee:
    handler: handler.hello
    environment:
      FIRST_NAME: "RAJEEV1"
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"





from flask import Flask
from flask_pymongo import PyMongo

app = Flask(__name__)
app.config["MONGO_URI"] = "mongodb://localhost:27017/myDatabase"
mongo = PyMongo(app)

@app.route("/")
def home_page():
    online_users = mongo.db.users.find({"online": True})
    return render_template("index.html",
        online_users=online_users)
		
@app.route("/user/<username>")
def user_profile(username):
    user = mongo.db.users.find_one_or_404({"_id": username})
    return render_template("user.html",
        user=user)

from flask_mongoengine import MongoEngine

app.config['MONGODB_SETTINGS'] = {'DB': 'testing'}
app.config['TESTING'] = True
app.config['SECRET_KEY'] = 'flask+mongoengine=<3'
app.debug = True
app.config['DEBUG_TB_PANELS'] = (
    'flask_debugtoolbar.panels.versions.VersionDebugPanel',
    'flask_debugtoolbar.panels.timer.TimerDebugPanel',
    'flask_debugtoolbar.panels.headers.HeaderDebugPanel',
    'flask_debugtoolbar.panels.request_vars.RequestVarsDebugPanel',
    'flask_debugtoolbar.panels.template.TemplateDebugPanel',
    'flask_debugtoolbar.panels.logger.LoggingPanel',
    'flask_mongoengine.panels.MongoDebugPanel'
)

app.config['DEBUG_TB_INTERCEPT_REDIRECTS'] = False

db = MongoEngine()
db.init_app(app)




from security import authenticate, identity

# json web token


app = Flask(__name__)
app.secret_key = 'rajeev'
api = Api(app)

jwt = JWT(app, authenticate, identity)   #/auth
items = []


class Item(Resource):

    @jwt_required()
    def get(self, name):
        item = next(filter(lambda x: x['name'] == name, items), None)
        return {'item': item}, 200 if item else 404

    def post(self, name):
        if next(filter(lambda x: x['name'] == name, items), None):
            return {'message': 'An item with name {} already exists'.format(name)}, 400
        data = request.get_json()
        item = {'name': name, 'price': data['price']}
        items.append(item)
        return item, 201

    def delete(self, name):
        global items
        items = list(filter(lambda x: x['name'] != name, items))
        return {'message': 'Item deleted'}

    def put(self, name):
        parser = reqparse.RequestParser()
        parser.add_argument('price',
                            type=float,
                            required=True,
                            help='For help')
        data = parser.parse_args()

        item = next(filter(lambda x: x['name'] == name, items), None)
        if not item:
            item = {'name': name, 'price': data['price']}
            items.append(item)
        else:
            item.update(data)
        return item

class ItemList(Resource):
    def get(self):
        return {'items': items}


api.add_resource(Item, '/item/<string:name>')
api.add_resource(ItemList, '/items')

app.run(debug=True, host='0.0.0.0')


from werkzeug.security import safe_str_cmp
from user import User

users = [
    User(1, 'raj', '123')
]

username_mapping = {u.username: u for u in users}

userid_mapping = {u.id: u for u in users}


def authenticate(username, password):
    user = username_mapping.get(username, None)
    if user and safe_str_cmp(user.password, password):
        return user


def identity(payload):
    user_id = payload['identity']
    return userid_mapping.get(user_id, None)

class User:
    def __init__(self, _id, username, password):
        self.id = _id
        self.username= username
        self.password = password
		
		
from flask import Flask, request
from flask_restful import Resource, Api, reqparse
from flask_jwt import JWT, jwt_required

from security import authenticate, identity

# json web token


app = Flask(__name__)
app.secret_key = 'rajeev'
api = Api(app)

jwt = JWT(app, authenticate, identity)   #/auth
items = []


class Item(Resource):

    @jwt_required()
    def get(self, name):
        item = next(filter(lambda x: x['name'] == name, items), None)
        return {'item': item}, 200 if item else 404

    def post(self, name):
        if next(filter(lambda x: x['name'] == name, items), None):
            return {'message': 'An item with name {} already exists'.format(name)}, 400
        data = request.get_json()
        item = {'name': name, 'price': data['price']}
        items.append(item)
        return item, 201

    def delete(self, name):
        global items
        items = list(filter(lambda x: x['name'] != name, items))
        return {'message': 'Item deleted'}

    def put(self, name):
        parser = reqparse.RequestParser()
        parser.add_argument('price',
                            type=float,
                            required=True,
                            help='For help')
        data = parser.parse_args()

        item = next(filter(lambda x: x['name'] == name, items), None)
        if not item:
            item = {'name': name, 'price': data['price']}
            items.append(item)
        else:
            item.update(data)
        return item

class ItemList(Resource):
    def get(self):
        return {'items': items}


api.add_resource(Item, '/item/<string:name>')
api.add_resource(ItemList, '/items')

app.run(port=5000, debug=True)



VNF


VIM Specific :-

vim ~/ .vimrc

Word replacement :-
File Replacement:-

:222,300s/change/rajeev/gc
:%s/change/rajeev/g

